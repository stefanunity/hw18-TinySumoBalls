let UIManager = {}
let sliderValue = 0;

game.GameManagerSystem.update = function (scheduler, world) {
      world.forEachEntity([game.GameManager], function (entity, manager) {
            switch (manager.State()) {

                  case game.GameState.Init:
                        ut.Flow.Service.instantiate('Sumo.UI.StartMenu');
                        manager.setState(game.GameState.StartMenu);
                        break;
                  case game.GameState.StartMenu:
                        // The logic for start menu is in UIService.js.txt
                        break;
                  case game.GameState.InitGameplay:
                        InitGameplay(world, manager);
                        break;
                  case game.GameState.Gameplay:
                        GameplayUpdate(world, manager);
                        break;
                  case game.GameState.GameOver:
                        GameOver(world, manager);
                        break;
            }
      });
}

const InitGameplay = function (world, manager) {
      ut.Flow.Service.destroyAll('Sumo.UI.StartMenu');
      ut.Flow.Service.instantiate('game.Gameplay');
      SpawnPlayers(world, manager);
      manager.setState(game.GameState.Gameplay);

      // Score Slider, not needed anymore
      // let gameSettings = manager.gameSettings();
      // let totalPlayers = gameSettings.humanCount + gameSettings.aiCount;
      // if (2 === totalPlayers) {
      //       UIManager = ut.Flow.Service.instantiate("Sumo.UI.UI");
      // }

}

const GameplayUpdate = function (world, manager) {
      let deadPlayers = 0;
      world.forEachEntity([game.Player, game.PlayerDead], function (entity, player, playerDead) {
            deadPlayers++;
      });

      let gameSettings = manager.gameSettings();
      let totalPlayers = gameSettings.humanCount + gameSettings.aiCount;
      if (totalPlayers - deadPlayers <= 1) {
            StartNewRound(world, manager);
      }
}

const StartNewRound = function (world, manager) {
      let gameOver = false;

      world.forEachEntity([game.Player, ut.Core2D.Transform], function (entity, player, transform) {
            entity.addComponent(game.PlayerRespawn);
            if (player.alive()) {
                  let score = player.score();
                  score++;
                  // Update player score
                  player.setScore(score);
                  player.scoreEntity().getComponent(ut.Text.TextRenderer).setText(score.toString());

                  if (score >= 3) {
                        gameOver = true;
                  }
            }
            player.setAlive(true);
            transform.setLocalScale(new Vector3(1, 1, 1));
      });

      if (gameOver) {
            manager.setState(game.GameState.GameOver);
            ut.Flow.Service.instantiate('game.Gameover');
      }
}

const GameOver = function (world, manager) {
      ut.Flow.Service.destroyAll('game.Gameplay');
      // ut.Flow.Service.destroyAll("Sumo.UI.UI");
      DespawnPlayers(world, manager);

      if (ut.Runtime.Input.getMouseButtonDown(0)) {
            ut.Flow.Service.destroyAll('game.Gameover');
            manager.setState(game.GameState.Init);
      }

}


const SpawnPlayers = function (world, manager) {
      // Destroy players
      // TODO why?
      DespawnPlayers(world, manager);

      // Load random colors and faces for players
      let playerAssets = ut.Flow.Service.instantiate('game.PlayerAssets');
      let sprites = playerAssets.root.getComponent(game.PlayerSprites);
      let colors = sprites.colors();
      let faces = sprites.faces();

      const spawnRadius = 2.5;
      let gameSettings = manager.gameSettings();
      let playerCount = gameSettings.aiCount + gameSettings.humanCount;
      let angleStep = Math.PI * 2 / playerCount;
      for (let i = 0; i < playerCount; i++) {
            let group = ut.Flow.Service.instantiate('game.Player');
            let entity = group.root;
            let transform = entity.getComponent(ut.Core2D.Transform);

            // Set position to be in a circle
            let player = entity.getComponent(game.Player);
            player.setStartPosition(new Vector2(Math.cos(angleStep * i) * spawnRadius, Math.sin(angleStep * i) * spawnRadius));
            entity.addComponent(game.PlayerRespawn);

            // Set colors
            let randomColor = colors[Math.floor(Math.random() * colors.length)]

            let ballSpriteRenderer = entity.getComponent(ut.Core2D.Sprite2DRenderer);
            ballSpriteRenderer.setColor(randomColor);

            let scoreSpriteRenderer = transform.find("Score").getComponent(ut.Text.TextRenderer).setText("0");
            // scoreSpriteRenderer.setColor(randomColor);

            // Set faces
            let faceSpriteRenderer = transform.find("Face").getComponent(ut.Core2D.Sprite2DRenderer);
            faceSpriteRenderer.setSprite(faces[Math.floor(Math.random() * faces.length)])

            // Set controls depending on if it's human or AI
            if (i < gameSettings.humanCount) {
                  let inputControl = entity.getOrAddComponent(game.MovementInput);
                  inputControl.setInputID(i);
            } else {
                  let AiControl = entity.getOrAddComponent(game.MovementAI);
            }
      }
}

const DespawnPlayers = function (world, manager) {
      world.forEachEntity([game.Player, ut.Core2D.Transform], function (entity, player, transform) {
            transform.destroyTree(true);
      });
}